#!/usr/bin/env bash
# Run RSpec tests in parallel with fail-fast support
# Even faster than rspec-quick by using parallel execution
# Stops all parallel processes when one fails

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Check if any argument contains a line number (e.g., spec/file.rb:123)
has_line_number=false
for arg in "$@"; do
  if [[ "$arg" =~ :[0-9]+$ ]]; then
    has_line_number=true
    break
  fi
done

# If line number is specified, delegate to rspec-quick
if [[ "$has_line_number" == "true" ]]; then
  echo -e "${YELLOW}⚡ RSpec Quicker${NC} - Delegating to rspec-quick for line-specific test"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -e "  ${GREEN}✓${NC} Line number detected, using single-process execution"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo ""
  exec bin/rspec-quick "$@"
fi

echo -e "${YELLOW}⚡ RSpec Quicker${NC} - Parallel tests with fail-fast"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "  ${GREEN}✓${NC} In-memory database for speed"
echo -e "  ${GREEN}✓${NC} Coverage disabled"
echo -e "  ${GREEN}✓${NC} Stops on first failure"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Start timer
START_TIME=$(date +%s)

# Check if any arguments contain --format
format_args=""
other_args=()
skip_next=false

for arg in "$@"; do
  if [[ "$skip_next" == "true" ]]; then
    format_args="--format $arg"
    skip_next=false
  elif [[ "$arg" == "--format" ]]; then
    skip_next=true
  elif [[ "$arg" == --format=* ]]; then
    format_args="--format ${arg#--format=}"
  else
    other_args+=("$arg")
  fi
done

# Default to progress format if not specified
if [[ -z "$format_args" ]]; then
  format_args="--format progress"
fi

# Disable coverage, use in-memory database, and run in parallel with fail-fast
# Filter out unwanted messages and clean up output
DISABLE_SIMPLECOV=true IN_MEMORY_DB=true bundle exec parallel_rspec \
  --fail-fast \
  --test-options "--fail-fast $format_args" \
  "${other_args[@]}" 2>&1 | \
  grep -v "✅ Using in-memory SQLite database for tests" | \
  grep -v "RSpec is shutting down and will print the summary report" | \
  awk '
    BEGIN { 
      buffer = ""
      in_final_summary = 0
      failure_buffer = ""
      collecting_failure = 0
    }
    
    # Capture failure information
    /^Failures:/ {
      collecting_failure = 1
      failure_buffer = $0 "\n"
      next
    }
    
    /^Failed examples:/ {
      if (collecting_failure) {
        failure_buffer = failure_buffer "\n" $0 "\n"
      }
      next
    }
    
    /^rspec \./ {
      if (collecting_failure) {
        failure_buffer = failure_buffer $0 "\n"
      }
      next
    }
    
    # Skip empty lines unless in failure collection
    /^$/ {
      if (collecting_failure && failure_buffer !~ /^rspec \./) {
        failure_buffer = failure_buffer "\n"
      }
      next
    }
    
    # Skip all "Finished in" lines
    /^Finished in .* seconds/ { next }
    
    # Skip intermediate example count lines
    /^[0-9]+ examples?, [0-9]+ failures?/ { next }
    
    # Keep "Tests Failed" or "Tests Passed"
    /^Tests (Failed|Passed)/ { 
      collecting_failure = 0
      if (failure_buffer) print failure_buffer
      print
      next
    }
    
    # Keep "Took X seconds"
    /^Took [0-9]+ seconds/ {
      print
      next
    }
    
    # Keep progress dots and actual output
    {
      if (collecting_failure) {
        failure_buffer = failure_buffer $0 "\n"
      } else {
        print
      }
    }
  ' | \
  sed '/^$/N;/^\n$/d'  # Remove excessive blank lines

# Capture exit status
EXIT_STATUS=${PIPESTATUS[0]}

# End timer
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
if [ $EXIT_STATUS -eq 0 ]; then
    echo -e "${GREEN}✅ All tests passed!${NC} (${DURATION}s)"
else
    echo -e "${RED}❌ Tests failed!${NC} (${DURATION}s)"
fi
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

exit $EXIT_STATUS