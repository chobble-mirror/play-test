#!/usr/bin/env bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to clear screen and move cursor to top
clear_screen() {
    printf "\033[2J\033[H"
}

# Function to get emoji for status
get_status_emoji() {
    case "$1" in
        "success")
            echo "✅"
            ;;
        "failure")
            echo "❌"
            ;;
        "in_progress")
            echo "🏃"
            ;;
        "queued"|"waiting"|"pending")
            echo "⏳"
            ;;
        "cancelled")
            echo "🚫"
            ;;
        "skipped")
            echo "⏭️"
            ;;
        "neutral")
            echo "⚪"
            ;;
        "action_required")
            echo "⚠️"
            ;;
        "timed_out")
            echo "⏰"
            ;;
        "stale")
            echo "🗄️"
            ;;
        "startup_failure")
            echo "💥"
            ;;
        *)
            echo "❓"
            ;;
    esac
}

# Function to get color for status
get_status_color() {
    case "$1" in
        "success")
            echo "$GREEN"
            ;;
        "failure"|"startup_failure")
            echo "$RED"
            ;;
        "in_progress")
            echo "$BLUE"
            ;;
        "queued"|"waiting"|"pending")
            echo "$YELLOW"
            ;;
        "cancelled"|"skipped"|"stale")
            echo "$PURPLE"
            ;;
        *)
            echo "$NC"
            ;;
    esac
}

# Function to format duration
format_duration() {
    local seconds=$1
    if [ -z "$seconds" ] || [ "$seconds" = "null" ]; then
        echo "N/A"
        return
    fi
    
    local hours=$((seconds / 3600))
    local minutes=$(((seconds % 3600) / 60))
    local secs=$((seconds % 60))
    
    if [ $hours -gt 0 ]; then
        printf "%dh %dm %ds" $hours $minutes $secs
    elif [ $minutes -gt 0 ]; then
        printf "%dm %ds" $minutes $secs
    else
        printf "%ds" $secs
    fi
}

# Main monitoring loop
while true; do
    # Build entire output in a variable first (double buffering)
    output=""
    
    # Header
    output+="${CYAN}🎬 GitHub Actions Monitor - $(date '+%Y-%m-%d %H:%M:%S')${NC}\n"
    output+="${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    output+="\n"
    
    # Repository
    repo="chobble-mirror/play-test"
    output+="📦 Repository: ${BLUE}$repo${NC}\n"
    output+="\n"
    
    # Fetch runs with JSON output
    runs_json=$(gh run list -R "$repo" --limit 10 --json number,displayTitle,status,conclusion,event,headBranch,startedAt,updatedAt,workflowName,url 2>/dev/null || echo "[]")
    
    if [ "$runs_json" = "[]" ]; then
        output+="${YELLOW}No workflow runs found or unable to fetch data.${NC}\n"
    else
        # Header for the table
        output+=$(printf "%-8s %-30s %-12s %-15s %-15s %-10s" \
            "Run #" "Workflow / Title" "Status" "Branch" "Event" "Duration")
        output+="\n${CYAN}──────────────────────────────────────────────────────────────────────────────────────────────────${NC}\n"
        
        # Process each run
        while read -r run; do
            # Parse JSON fields
            number=$(echo "$run" | jq -r '.number')
            display_title=$(echo "$run" | jq -r '.displayTitle // "No title"' | cut -c1-28)
            status=$(echo "$run" | jq -r '.status')
            conclusion=$(echo "$run" | jq -r '.conclusion // ""')
            event=$(echo "$run" | jq -r '.event')
            branch=$(echo "$run" | jq -r '.headBranch' | cut -c1-13)
            workflow=$(echo "$run" | jq -r '.workflowName // "Unknown"' | cut -c1-28)
            started=$(echo "$run" | jq -r '.startedAt // ""')
            updated=$(echo "$run" | jq -r '.updatedAt // ""')
            
            # Determine actual status (use conclusion if completed)
            if [ "$status" = "completed" ] && [ -n "$conclusion" ]; then
                display_status="$conclusion"
            else
                display_status="$status"
            fi
            
            # Get emoji and color
            emoji=$(get_status_emoji "$display_status")
            color=$(get_status_color "$display_status")
            
            # Calculate duration
            if [ -n "$started" ] && [ "$started" != "null" ]; then
                if [ "$status" = "completed" ] && [ -n "$updated" ] && [ "$updated" != "null" ]; then
                    # For completed runs, calculate from start to end
                    duration_secs=$(( $(date -d "$updated" +%s) - $(date -d "$started" +%s) ))
                    duration=$(format_duration $duration_secs)
                elif [ "$status" = "in_progress" ]; then
                    # For in-progress runs, calculate from start to now
                    duration_secs=$(( $(date +%s) - $(date -d "$started" +%s) ))
                    duration=$(format_duration $duration_secs)
                else
                    duration="N/A"
                fi
            else
                duration="N/A"
            fi
            
            # Add the row to output
            output+=$(printf "%-8s %-30s ${color}%-2s %-10s${NC} %-15s %-15s %-10s" \
                "#$number" \
                "$workflow" \
                "$emoji" \
                "$display_status" \
                "$branch" \
                "$event" \
                "$duration")
            output+="\n"
            
            # If there's a different display title, show it on next line
            if [ "$display_title" != "$workflow" ] && [ "$display_title" != "No title" ]; then
                output+=$(printf "         ${PURPLE}↳ %s${NC}" "$display_title")
                output+="\n"
            fi
        done < <(echo "$runs_json" | jq -r '.[] | @json')
    fi
    
    output+="\n"
    output+="${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    output+="🔄 Refreshing every 5 seconds... Press ${RED}Ctrl+C${NC} to exit"
    
    # Now clear and display all at once
    clear_screen
    echo -e "$output"
    
    # Wait 5 seconds
    sleep 5
done